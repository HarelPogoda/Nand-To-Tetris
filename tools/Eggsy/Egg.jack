class Egg {
    field int x, y, radius;
    field boolean isStopped;

    constructor Egg new(int Ax, int Ay, int Aradius) {
        let x = Ax;  
        let y = Ay;
        let radius = Aradius;
        let isStopped=false;

        do draw();
        return this;
    }

    method void draw() {
        do Screen.setColor(true);
        do Screen.drawCircle(x, y, radius); 
        return;
    }

    method void erase() {
        do Screen.setColor(false);
        do Screen.drawCircle(x, y, radius); 
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void decSize() {
        if (radius > 0) {
            do erase();
            let radius = radius - 0.5; 
            do draw();
        }
        return;
    }

    /** Moves the egg down by 2 pixels */
    method void moveDown() {
        do erase();
        let y = y + 2; 
        do draw();
        return;
    }

    method void playEgg() {
        //if egg is not stopped, then it is in the game and can move
        // egg is stopped if its popped or fallen

        // If the egg is stopped, do nothing
        if (isStopped) {
            return;
        }
        else{
	    // Move and shrink the egg
            do moveDown();
            do Sys.wait(50);
            do decSize();
        }
        return;
    }


    method bool isFallen() {
        if ((y > 220) | (y = 220)  | (radius = 0)) { 
            return true;
        }
        return false;
    }


    method void setStopped(){
        let isStopped = true;
	//do Output.printString("Egg is set stopped!!");
        //do Output.println();
        return;
    }

    method bool getStopped(){
        return isStopped;
    }


   


    method boolean checkCollisionArrow(int arrowX, int arrowY) {
    	var boolean isColliding;
        let isColliding = false;

        // Check if the arrow is within the horizontal range of the egg
        if (((arrowX > (x - radius)) | (arrowX = (x - radius))) & ((arrowX < (x + radius)) | (arrowX = (x + radius)))) {  
            // Check if the arrow is within the vertical range of the egg
            if ((arrowY < y)) { 
                let isColliding = true;  
                let isStopped = true;
                // The arrow is inside the egg's bounding box
            }

        }

        return isColliding;

    }




    method boolean isEggShot(Weapon weapon, int weaponType) {
    	var int weaponX, weaponY, weaponSize, weaponWidth, weaponHeight;
        var boolean weaponShot;

    	let weaponX = weapon.getX();
    	let weaponY = weapon.getY();
    	let weaponSize = weapon.getSize(); // for square only
    	let weaponWidth = weapon.getWidth(); // for rhombus only
    	let weaponHeight = weapon.getHeight(); // for rhombus only
    	let weaponShot = weapon.getisShot();

    	
        // Debugging: Check if the egg is already stopped
    	if (isStopped) {
            //do Output.printString("Egg is already stopped!");
            //do Output.println();
	    return false;
        } 
       

        // Only check collisions if the weapon has been shot and the egg is not stopped

        if (weaponShot) { 
	    if (weaponType = 1) { // Rhombus
		//do Output.printString("Weapon Rhombus!");
                //do Output.println();

		if (checkCollisionArrow(weaponX, weaponY)) {
		    //do Output.printString("Collision detected!");
                    //do Output.println();
                    return true;
                }
		
            }

            if (weaponType = 2) { // Square
		//do Output.printString("Weapon Square!");
                //do Output.println();

		if (checkCollisionArrow(weaponX, weaponY)) {
		    //do Output.printString("Collision detected!");
                    //do Output.println();
                    return true;
                }
            }

	    if (weaponType = 3) { // Arrow
		//do Output.printString("Weapon Arrow!");
                //do Output.println();

                if (checkCollisionArrow(weaponX, weaponY)) {
		    //do Output.printString("Collision detected!");
                    //do Output.println();
                    return true;
                }
            }
	    
        }

        return false;
    }
    



    method int getX() {
        // Return the current x-coordinate of the arrow
        return x;
    }

    method int getY() {
        // Return the current y-coordinate of the arrow
        return y;
    }



}
